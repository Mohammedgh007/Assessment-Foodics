{"ast":null,"code":"import \"core-js/modules/esnext.iterator.map.js\";\nimport { Modal } from 'bootstrap';\nimport FoodicsSecondaryBtn from '../buttons/FoodicsSecondaryBtn.vue';\nimport FoodicsTertiaryBtn from '../buttons/FoodicsTertiaryBtn.vue';\nexport default {\n  name: 'TimeSlotsField',\n  components: {\n    FoodicsSecondaryBtn,\n    FoodicsTertiaryBtn\n  },\n  props: {\n    label: {\n      type: String,\n      required: true\n    },\n    name: {\n      type: String,\n      required: true\n    },\n    value: {\n      type: Array,\n      required: true,\n      default: () => []\n    },\n    handleChange: {\n      type: Function,\n      required: true\n    },\n    maxSlots: {\n      type: Number,\n      required: false,\n      default: 5\n    }\n  },\n  data() {\n    return {\n      tempStartTime: '',\n      tempEndTime: '',\n      modal: null,\n      errorMsg: ''\n    };\n  },\n  computed: {\n    displayValue() {\n      if (!this.value.length) return '';\n      return this.value.map(period => this.formatPeriod(period)).join(', ');\n    }\n  },\n  mounted() {\n    this.modal = new Modal(document.getElementById(`timeSelectModal-${this.name}`));\n  },\n  methods: {\n    openTimeSelector() {\n      console.log(\"this.value.length\", this.value.length, this.maxSlots);\n      if (this.value.length >= this.maxSlots) {\n        this.errorMsg = this.$t('error.maximumTimeSlotsAllowed', {\n          maxSlots: this.maxSlots\n        });\n        return;\n      }\n      this.tempStartTime = '';\n      this.tempEndTime = '';\n      this.modal.show();\n    },\n    closeModal() {\n      if (this.modal) {\n        this.modal.hide();\n        this.tempStartTime = '';\n        this.tempEndTime = '';\n      }\n    },\n    formatPeriod(period) {\n      // Convert 24h times to 12h format for display\n      const formatTime = time => {\n        const [hours, minutes] = time.split(':');\n        const hour = parseInt(hours);\n        const ampm = hour >= 12 ? 'PM' : 'AM';\n        const hour12 = hour % 12 || 12;\n        return `${hour12}:${minutes} ${ampm}`;\n      };\n      return `${formatTime(period.start)} - ${formatTime(period.end)}`;\n    },\n    removePeriod(index) {\n      const newValue = [...this.value];\n      newValue.splice(index, 1);\n      this.handleChange({\n        target: {\n          name: this.name,\n          value: newValue\n        }\n      });\n    },\n    handleCancel() {\n      this.closeModal();\n    },\n    handleSave() {\n      if (this.tempStartTime && this.tempEndTime && this.tempStartTime < this.tempEndTime) {\n        if (this.value.length > this.maxSlots) {\n          this.errorMsg = this.$t('error.maximumTimeSlotsAllowed', {\n            maxSlots: this.maxSlots\n          });\n          return;\n        }\n        const newPeriod = {\n          start: this.tempStartTime,\n          end: this.tempEndTime\n        };\n        const newValue = [...this.value, newPeriod];\n        this.handleChange({\n          target: {\n            name: this.name,\n            value: newValue\n          }\n        });\n        this.closeModal();\n      } else if (this.tempStartTime && this.tempEndTime && this.tempStartTime >= this.tempEndTime) {\n        this.errorMsg = this.$t('startTimeMustBeBeforeEndTime');\n      }\n    }\n  }\n};","map":{"version":3,"names":["Modal","FoodicsSecondaryBtn","FoodicsTertiaryBtn","name","components","props","label","type","String","required","value","Array","default","handleChange","Function","maxSlots","Number","data","tempStartTime","tempEndTime","modal","errorMsg","computed","displayValue","length","map","period","formatPeriod","join","mounted","document","getElementById","methods","openTimeSelector","console","log","$t","show","closeModal","hide","formatTime","time","hours","minutes","split","hour","parseInt","ampm","hour12","start","end","removePeriod","index","newValue","splice","target","handleCancel","handleSave","newPeriod"],"sources":["src/View/components/ui/fields/TimeSlotsField.vue"],"sourcesContent":["<template>\n  <div class=\"form-group w-100\">\n    <label :for=\"name\" class=\"form-label\">{{ label }}</label>\n    \n    <div class=\"input-group\" @click=\"openTimeSelector\">\n      <input \n        type=\"text\"\n        class=\"form-control\" \n        :id=\"name\"\n        :name=\"name\"\n        :value=\"displayValue\"\n        readonly\n        :placeholder=\"$t('pleaseSelectFromTheOptions')\"\n      >\n      <span class=\"input-group-text\">\n        <i class=\"bi bi-clock\"></i>\n      </span>\n    </div>\n\n    <div class=\"mt-2\">\n      <div v-for=\"(period, index) in value\" :key=\"index\" class=\"badge bg-secondary me-2 mb-2\">\n        {{ formatPeriod(period) }}\n        <i class=\"bi bi-x-circle ms-1\" style=\"cursor: pointer\" @click=\"removePeriod(index)\"></i>\n      </div>\n    </div>\n\n    <!-- Bootstrap Modal for Time Selection -->\n    <div class=\"modal fade\" :id=\"`timeSelectModal-${name}`\" tabindex=\"-1\">\n      <div class=\"modal-dialog\">\n        <div class=\"modal-content\">\n          <div class=\"modal-header\">\n            <h5 class=\"modal-title\">{{ $t('selectTimePeriod') }}</h5>\n            <button type=\"button\" class=\"btn-close\" @click=\"closeModal\"></button>\n          </div>\n          <div class=\"modal-body\">\n            <div class=\"row\">\n              <div class=\"col-6\">\n                <label>{{ $t('startTime') }}</label>\n                <input \n                  type=\"time\" \n                  class=\"form-control\" \n                  v-model=\"tempStartTime\"\n                  :max=\"tempEndTime\"\n                >\n              </div>\n              <div class=\"col-6\">\n                <label>{{ $t('endTime') }}</label>\n                <input \n                  type=\"time\" \n                  class=\"form-control\" \n                  v-model=\"tempEndTime\"\n                  :min=\"tempStartTime\"\n                >\n              </div>\n            </div>\n            <div v-if=\"errorMsg\" class=\"alert alert-danger mt-2\">\n              {{ errorMsg }}\n            </div>\n          </div>\n          <div class=\"modal-footer row d-flex flex-row\">\n            <div class=\"text-center col-12 col-md-auto\">\n              <FoodicsTertiaryBtn :onClick=\"handleCancel\">{{ $t('cancel') }}</FoodicsTertiaryBtn>\n            </div>\n            <div class=\"col-12 col-md-auto\">\n              <FoodicsSecondaryBtn :onClick=\"handleSave\">{{ $t('save') }}</FoodicsSecondaryBtn>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Modal } from 'bootstrap'\nimport FoodicsSecondaryBtn from '../buttons/FoodicsSecondaryBtn.vue';\nimport FoodicsTertiaryBtn from '../buttons/FoodicsTertiaryBtn.vue';\n\nexport default {\n  name: 'TimeSlotsField',\n  components: {\n    FoodicsSecondaryBtn,\n    FoodicsTertiaryBtn\n  },\n  props: {\n    label: {\n      type: String,\n      required: true\n    },\n    name: {\n      type: String,\n      required: true\n    },\n    value: {\n      type: Array,\n      required: true,\n      default: () => []\n    },\n    handleChange: {\n      type: Function,\n      required: true\n    },\n    maxSlots: {\n      type: Number,\n      required: false, \n      default: 5\n    }\n  },\n  data() {\n    return {\n      tempStartTime: '',\n      tempEndTime: '',\n      modal: null,\n      errorMsg: ''\n    }\n  },\n  computed: {\n    displayValue() {\n      if (!this.value.length) return ''\n      return this.value.map(period => this.formatPeriod(period)).join(', ')\n    }\n  },\n  mounted() {\n    this.modal = new Modal(document.getElementById(`timeSelectModal-${this.name}`))\n  },\n  methods: {\n    openTimeSelector() { \n      console.log(\"this.value.length\", this.value.length, this.maxSlots)\n      if (this.value.length >= this.maxSlots) {\n        this.errorMsg = this.$t('error.maximumTimeSlotsAllowed', { maxSlots: this.maxSlots })\n        return\n      }\n      this.tempStartTime = ''\n      this.tempEndTime = ''\n      this.modal.show()\n    },\n    closeModal() {\n      if (this.modal) {\n        this.modal.hide()\n        this.tempStartTime = ''\n        this.tempEndTime = ''\n      }\n    },\n    formatPeriod(period) {\n      // Convert 24h times to 12h format for display\n      const formatTime = (time) => {\n        const [hours, minutes] = time.split(':')\n        const hour = parseInt(hours)\n        const ampm = hour >= 12 ? 'PM' : 'AM'\n        const hour12 = hour % 12 || 12\n        return `${hour12}:${minutes} ${ampm}`\n      }\n      return `${formatTime(period.start)} - ${formatTime(period.end)}`\n    },\n    removePeriod(index) {\n      const newValue = [...this.value]\n      newValue.splice(index, 1)\n      this.handleChange({\n        target: {\n          name: this.name,\n          value: newValue\n        }\n      })\n    },\n    handleCancel() {\n      this.closeModal()\n    },\n    handleSave() {\n      if (this.tempStartTime && this.tempEndTime && this.tempStartTime < this.tempEndTime) {\n        if (this.value.length > this.maxSlots) {\n          this.errorMsg = this.$t('error.maximumTimeSlotsAllowed', { maxSlots: this.maxSlots })\n          return\n        }\n        const newPeriod = {\n          start: this.tempStartTime,\n          end: this.tempEndTime\n        }\n        const newValue = [...this.value, newPeriod]\n        this.handleChange({\n          target: {\n            name: this.name,\n            value: newValue\n          }\n        })\n        this.closeModal()\n      } else if (this.tempStartTime && this.tempEndTime && this.tempStartTime >= this.tempEndTime) {\n        this.errorMsg = this.$t('startTimeMustBeBeforeEndTime')\n      }\n    }\n  }\n}\n</script>\n"],"mappings":";AA0EA,SAAAA,KAAA;AACA,OAAAC,mBAAA;AACA,OAAAC,kBAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAH,mBAAA;IACAC;EACA;EACAG,KAAA;IACAC,KAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,QAAA;IACA;IACAN,IAAA;MACAI,IAAA,EAAAC,MAAA;MACAC,QAAA;IACA;IACAC,KAAA;MACAH,IAAA,EAAAI,KAAA;MACAF,QAAA;MACAG,OAAA,EAAAA,CAAA;IACA;IACAC,YAAA;MACAN,IAAA,EAAAO,QAAA;MACAL,QAAA;IACA;IACAM,QAAA;MACAR,IAAA,EAAAS,MAAA;MACAP,QAAA;MACAG,OAAA;IACA;EACA;EACAK,KAAA;IACA;MACAC,aAAA;MACAC,WAAA;MACAC,KAAA;MACAC,QAAA;IACA;EACA;EACAC,QAAA;IACAC,aAAA;MACA,UAAAb,KAAA,CAAAc,MAAA;MACA,YAAAd,KAAA,CAAAe,GAAA,CAAAC,MAAA,SAAAC,YAAA,CAAAD,MAAA,GAAAE,IAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAT,KAAA,OAAApB,KAAA,CAAA8B,QAAA,CAAAC,cAAA,yBAAA5B,IAAA;EACA;EACA6B,OAAA;IACAC,iBAAA;MACAC,OAAA,CAAAC,GAAA,2BAAAzB,KAAA,CAAAc,MAAA,OAAAT,QAAA;MACA,SAAAL,KAAA,CAAAc,MAAA,SAAAT,QAAA;QACA,KAAAM,QAAA,QAAAe,EAAA;UAAArB,QAAA,OAAAA;QAAA;QACA;MACA;MACA,KAAAG,aAAA;MACA,KAAAC,WAAA;MACA,KAAAC,KAAA,CAAAiB,IAAA;IACA;IACAC,WAAA;MACA,SAAAlB,KAAA;QACA,KAAAA,KAAA,CAAAmB,IAAA;QACA,KAAArB,aAAA;QACA,KAAAC,WAAA;MACA;IACA;IACAQ,aAAAD,MAAA;MACA;MACA,MAAAc,UAAA,GAAAC,IAAA;QACA,OAAAC,KAAA,EAAAC,OAAA,IAAAF,IAAA,CAAAG,KAAA;QACA,MAAAC,IAAA,GAAAC,QAAA,CAAAJ,KAAA;QACA,MAAAK,IAAA,GAAAF,IAAA;QACA,MAAAG,MAAA,GAAAH,IAAA;QACA,UAAAG,MAAA,IAAAL,OAAA,IAAAI,IAAA;MACA;MACA,UAAAP,UAAA,CAAAd,MAAA,CAAAuB,KAAA,OAAAT,UAAA,CAAAd,MAAA,CAAAwB,GAAA;IACA;IACAC,aAAAC,KAAA;MACA,MAAAC,QAAA,YAAA3C,KAAA;MACA2C,QAAA,CAAAC,MAAA,CAAAF,KAAA;MACA,KAAAvC,YAAA;QACA0C,MAAA;UACApD,IAAA,OAAAA,IAAA;UACAO,KAAA,EAAA2C;QACA;MACA;IACA;IACAG,aAAA;MACA,KAAAlB,UAAA;IACA;IACAmB,WAAA;MACA,SAAAvC,aAAA,SAAAC,WAAA,SAAAD,aAAA,QAAAC,WAAA;QACA,SAAAT,KAAA,CAAAc,MAAA,QAAAT,QAAA;UACA,KAAAM,QAAA,QAAAe,EAAA;YAAArB,QAAA,OAAAA;UAAA;UACA;QACA;QACA,MAAA2C,SAAA;UACAT,KAAA,OAAA/B,aAAA;UACAgC,GAAA,OAAA/B;QACA;QACA,MAAAkC,QAAA,YAAA3C,KAAA,EAAAgD,SAAA;QACA,KAAA7C,YAAA;UACA0C,MAAA;YACApD,IAAA,OAAAA,IAAA;YACAO,KAAA,EAAA2C;UACA;QACA;QACA,KAAAf,UAAA;MACA,gBAAApB,aAAA,SAAAC,WAAA,SAAAD,aAAA,SAAAC,WAAA;QACA,KAAAE,QAAA,QAAAe,EAAA;MACA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}