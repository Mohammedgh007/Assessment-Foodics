{"ast":null,"code":"import _defineProperty from \"/Users/mohammedalghamdi/Desktop/personal/career/Foodics/tech assess/foodics-test/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport BranchOverviewModel from \"@/business/models/BranchOverviewModel\";\nimport BranchTableModel from \"@/business/models/BranchTableModel\";\nexport default class GetBranchesResponse {\n  /**\n   * @param {Object} jsonMap\n   * @param {boolean} doesAllowReservation\n   */\n  constructor(jsonMap, doesAllowReservation) {\n    /**\n     * @type {Array<BranchOverviewModel>}\n     */\n    _defineProperty(this, \"branches\", void 0);\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"pagesCount\", void 0);\n    console.log(\"jsonMap[]\", jsonMap.data[0], doesAllowReservation);\n    this.branches = jsonMap.data.filter(branch => branch.accepts_reservations === doesAllowReservation).map(branch => this.mapToBranchOverviewModel(branch));\n    this.pagesCount = jsonMap.links.next != null && jsonMap.links.next.includes('page=2') ? 2 : 1; // branches do not include last page info in meta unlike what is specified in pagination section, so we assume there is only one or two pages.\n  }\n\n  /**\n   * @param {Object} jsonBranch\n   * @returns {BranchOverviewModel}\n   */\n  mapToBranchOverviewModel(jsonBranch) {\n    const tables = this.mapToTables(jsonBranch);\n    const reservationsSchedule = null;\n    return new BranchOverviewModel(jsonBranch.name, jsonBranch.reference, tables, jsonBranch.reservation_duration, jsonBranch.accepts_reservations, reservationsSchedule);\n  }\n\n  /**\n   * It is a helper function to map the tables from the json to the BranchTableModel\n   * @param {Object} jsonBranch\n   * @returns {Array<BranchTableModel>}\n   */\n  mapToTables(jsonBranch) {\n    return jsonBranch.sections.map(section => section.tables.map(table => new BranchTableModel(section.name, section.id, table.name, table.id)));\n  }\n}","map":{"version":3,"names":["BranchOverviewModel","BranchTableModel","GetBranchesResponse","constructor","jsonMap","doesAllowReservation","_defineProperty","console","log","data","branches","filter","branch","accepts_reservations","map","mapToBranchOverviewModel","pagesCount","links","next","includes","jsonBranch","tables","mapToTables","reservationsSchedule","name","reference","reservation_duration","sections","section","table","id"],"sources":["/Users/mohammedalghamdi/Desktop/personal/career/Foodics/tech assess/foodics-test/src/infrastructure/foodicsAPI/dto/responses/GetBranchesReponse.js"],"sourcesContent":["import BranchOverviewModel from \"@/business/models/BranchOverviewModel\";\nimport BranchTableModel from \"@/business/models/BranchTableModel\";\nexport default class GetBranchesResponse {\n\n    /**\n     * @type {Array<BranchOverviewModel>}\n     */\n    branches;\n\n    /**\n     * @type {number}\n     */\n    pagesCount;\n\n    /**\n     * @param {Object} jsonMap\n     * @param {boolean} doesAllowReservation\n     */\n    constructor(jsonMap, doesAllowReservation){ console.log(\"jsonMap[]\", jsonMap.data[0], doesAllowReservation);\n        this.branches = jsonMap.data.filter((branch) => branch.accepts_reservations === doesAllowReservation).map((branch) => this.mapToBranchOverviewModel(branch));\n        this.pagesCount = (jsonMap.links.next != null && jsonMap.links.next.includes('page=2')) \n            ? 2 \n            : 1; // branches do not include last page info in meta unlike what is specified in pagination section, so we assume there is only one or two pages.\n    }\n\n    /**\n     * @param {Object} jsonBranch\n     * @returns {BranchOverviewModel}\n     */\n    mapToBranchOverviewModel(jsonBranch){\n        const tables = this.mapToTables(jsonBranch);\n        const reservationsSchedule = null;\n        return new BranchOverviewModel(jsonBranch.name, jsonBranch.reference, tables, jsonBranch.reservation_duration, jsonBranch.accepts_reservations, reservationsSchedule);\n    }\n\n    /**\n     * It is a helper function to map the tables from the json to the BranchTableModel\n     * @param {Object} jsonBranch\n     * @returns {Array<BranchTableModel>}\n     */\n    mapToTables(jsonBranch){\n        return jsonBranch.sections.map((section) => section.tables.map((table) => \n            new BranchTableModel(section.name, section.id, table.name, table.id)));\n    }\n\n}\n"],"mappings":";;;;AAAA,OAAOA,mBAAmB,MAAM,uCAAuC;AACvE,OAAOC,gBAAgB,MAAM,oCAAoC;AACjE,eAAe,MAAMC,mBAAmB,CAAC;EAYrC;AACJ;AACA;AACA;EACIC,WAAWA,CAACC,OAAO,EAAEC,oBAAoB,EAAC;IAd1C;AACJ;AACA;IAFIC,eAAA;IAKA;AACJ;AACA;IAFIA,eAAA;IAS4CC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEJ,OAAO,CAACK,IAAI,CAAC,CAAC,CAAC,EAAEJ,oBAAoB,CAAC;IACvG,IAAI,CAACK,QAAQ,GAAGN,OAAO,CAACK,IAAI,CAACE,MAAM,CAAEC,MAAM,IAAKA,MAAM,CAACC,oBAAoB,KAAKR,oBAAoB,CAAC,CAACS,GAAG,CAAEF,MAAM,IAAK,IAAI,CAACG,wBAAwB,CAACH,MAAM,CAAC,CAAC;IAC5J,IAAI,CAACI,UAAU,GAAIZ,OAAO,CAACa,KAAK,CAACC,IAAI,IAAI,IAAI,IAAId,OAAO,CAACa,KAAK,CAACC,IAAI,CAACC,QAAQ,CAAC,QAAQ,CAAC,GAChF,CAAC,GACD,CAAC,CAAC,CAAC;EACb;;EAEA;AACJ;AACA;AACA;EACIJ,wBAAwBA,CAACK,UAAU,EAAC;IAChC,MAAMC,MAAM,GAAG,IAAI,CAACC,WAAW,CAACF,UAAU,CAAC;IAC3C,MAAMG,oBAAoB,GAAG,IAAI;IACjC,OAAO,IAAIvB,mBAAmB,CAACoB,UAAU,CAACI,IAAI,EAAEJ,UAAU,CAACK,SAAS,EAAEJ,MAAM,EAAED,UAAU,CAACM,oBAAoB,EAAEN,UAAU,CAACP,oBAAoB,EAAEU,oBAAoB,CAAC;EACzK;;EAEA;AACJ;AACA;AACA;AACA;EACID,WAAWA,CAACF,UAAU,EAAC;IACnB,OAAOA,UAAU,CAACO,QAAQ,CAACb,GAAG,CAAEc,OAAO,IAAKA,OAAO,CAACP,MAAM,CAACP,GAAG,CAAEe,KAAK,IACjE,IAAI5B,gBAAgB,CAAC2B,OAAO,CAACJ,IAAI,EAAEI,OAAO,CAACE,EAAE,EAAED,KAAK,CAACL,IAAI,EAAEK,KAAK,CAACC,EAAE,CAAC,CAAC,CAAC;EAC9E;AAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}