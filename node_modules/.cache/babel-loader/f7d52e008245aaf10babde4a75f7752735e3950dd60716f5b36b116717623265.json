{"ast":null,"code":"import _defineProperty from \"/Users/mohammedalghamdi/Desktop/personal/career/Foodics/tech assess/foodics-test/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.filter.js\";\nimport \"core-js/modules/esnext.iterator.map.js\";\nimport BranchOverviewModel from \"@/business/models/BranchOverviewModel\";\nimport BranchTableModel from \"@/business/models/BranchTableModel\";\nimport ReservationTimeSlotModel from \"@/business/models/ReservationTimeSlotModel\";\nimport ReservationsScheduleModel from \"@/business/models/ReservationsScheduleModel\";\nexport default class GetBranchesResponse {\n  /**\n   * @param {Object} jsonMap\n   * @param {boolean} doesAllowReservation\n   */\n  constructor(jsonMap, doesAllowReservation, currPge) {\n    /**\n     * @type {Array<BranchOverviewModel>}\n     */\n    _defineProperty(this, \"branches\", void 0);\n    /**\n     * @type {number}\n     */\n    _defineProperty(this, \"pagesCount\", void 0);\n    this.branches = jsonMap.data.filter(branch => branch.accepts_reservations === doesAllowReservation).map(branch => this.mapToBranchOverviewModel(branch));\n    this.pagesCount = jsonMap.links.next != null && jsonMap.links.next.includes('page=2') || currPge == 1 ? 2 : 1; // branches do not include last page info in meta unlike what is specified in pagination section, so we assume there is only one or two pages.\n  }\n\n  /**\n   * @param {Object} jsonBranch\n   * @returns {BranchOverviewModel}\n   */\n  mapToBranchOverviewModel(jsonBranch) {\n    const tables = this.mapToTables(jsonBranch);\n    const reservationsSchedule = this.mapToReservationsSchedule(jsonBranch);\n    return new BranchOverviewModel(jsonBranch.id, jsonBranch.name, jsonBranch.reference, tables, jsonBranch.reservation_duration, jsonBranch.accepts_reservations, reservationsSchedule);\n  }\n\n  /**\n   * It is a helper function to map the tables from the json to the BranchTableModel\n   * @param {Object} jsonBranch\n   * @returns {Array<BranchTableModel>}\n   */\n  mapToTables(jsonBranch) {\n    return jsonBranch.sections.map(section => section.tables.map(table => new BranchTableModel(section.name, section.id, table.name, table.id, table.accepts_reservations))).flat();\n  }\n\n  /** \n   * @param {Object} jsonBranch\n   * @returns {ReservationsScheduleModel}\n   */\n  mapToReservationsSchedule(jsonBranch) {\n    if (jsonBranch.reservation_times == null || jsonBranch.reservation_times === undefined || Object.keys(jsonBranch.reservation_times).length === 0) {\n      return null;\n    } else {\n      return new ReservationsScheduleModel(this.mapToReservationsDay(jsonBranch.reservation_times.saturday), this.mapToReservationsDay(jsonBranch.reservation_times.sunday), this.mapToReservationsDay(jsonBranch.reservation_times.monday), this.mapToReservationsDay(jsonBranch.reservation_times.tuesday), this.mapToReservationsDay(jsonBranch.reservation_times.wednesday), this.mapToReservationsDay(jsonBranch.reservation_times.thursday), this.mapToReservationsDay(jsonBranch.reservation_times.friday));\n    }\n  }\n\n  /**\n   * It is a helper method for mapToReservationsSchedule(). It maps the data for a day to an array of ReservationTimeSlotModel\n   * @param {Array<Object>} jsonDay\n   * @returns {Array<ReservationTimeSlotModel>}\n   */\n  mapToReservationsDay(jsonDay) {\n    const isEmpty = jsonDay == null || jsonDay.length === 0;\n    return isEmpty ? [] : jsonDay.map(period => new ReservationTimeSlotModel(period[0], period[1]));\n  }\n}","map":{"version":3,"names":["BranchOverviewModel","BranchTableModel","ReservationTimeSlotModel","ReservationsScheduleModel","GetBranchesResponse","constructor","jsonMap","doesAllowReservation","currPge","_defineProperty","branches","data","filter","branch","accepts_reservations","map","mapToBranchOverviewModel","pagesCount","links","next","includes","jsonBranch","tables","mapToTables","reservationsSchedule","mapToReservationsSchedule","id","name","reference","reservation_duration","sections","section","table","flat","reservation_times","undefined","Object","keys","length","mapToReservationsDay","saturday","sunday","monday","tuesday","wednesday","thursday","friday","jsonDay","isEmpty","period"],"sources":["/Users/mohammedalghamdi/Desktop/personal/career/Foodics/tech assess/foodics-test/src/infrastructure/foodicsAPI/dto/responses/GetBranchesReponse.js"],"sourcesContent":["import BranchOverviewModel from \"@/business/models/BranchOverviewModel\";\nimport BranchTableModel from \"@/business/models/BranchTableModel\";\nimport ReservationTimeSlotModel from \"@/business/models/ReservationTimeSlotModel\";\nimport ReservationsScheduleModel from \"@/business/models/ReservationsScheduleModel\";\nexport default class GetBranchesResponse {\n\n    /**\n     * @type {Array<BranchOverviewModel>}\n     */\n    branches;\n\n    /**\n     * @type {number}\n     */\n    pagesCount;\n\n    /**\n     * @param {Object} jsonMap\n     * @param {boolean} doesAllowReservation\n     */\n    constructor(jsonMap, doesAllowReservation, currPge){ \n        this.branches = jsonMap.data.filter((branch) => branch.accepts_reservations === doesAllowReservation).map((branch) => this.mapToBranchOverviewModel(branch));\n        this.pagesCount = ((jsonMap.links.next != null && jsonMap.links.next.includes('page=2')) || currPge == 1) \n            ? 2 \n            : 1; // branches do not include last page info in meta unlike what is specified in pagination section, so we assume there is only one or two pages.\n    }\n\n    /**\n     * @param {Object} jsonBranch\n     * @returns {BranchOverviewModel}\n     */\n    mapToBranchOverviewModel(jsonBranch){\n        const tables = this.mapToTables(jsonBranch);\n        const reservationsSchedule = this.mapToReservationsSchedule(jsonBranch);\n        return new BranchOverviewModel(jsonBranch.id, jsonBranch.name, jsonBranch.reference, tables, jsonBranch.reservation_duration, jsonBranch.accepts_reservations, reservationsSchedule);\n    }\n\n    /**\n     * It is a helper function to map the tables from the json to the BranchTableModel\n     * @param {Object} jsonBranch\n     * @returns {Array<BranchTableModel>}\n     */\n    mapToTables(jsonBranch){\n        return jsonBranch.sections.map((section) => section.tables.map((table) => \n            new BranchTableModel(section.name, section.id, table.name, table.id, table.accepts_reservations))).flat();\n    }\n\n    /** \n     * @param {Object} jsonBranch\n     * @returns {ReservationsScheduleModel}\n     */\n    mapToReservationsSchedule(jsonBranch){ \n        if (jsonBranch.reservation_times == null || jsonBranch.reservation_times === undefined || Object.keys(jsonBranch.reservation_times).length === 0) {\n            return null;\n        } else {\n            return new ReservationsScheduleModel(this.mapToReservationsDay(jsonBranch.reservation_times.saturday), this.mapToReservationsDay(jsonBranch.reservation_times.sunday), this.mapToReservationsDay(jsonBranch.reservation_times.monday), this.mapToReservationsDay(jsonBranch.reservation_times.tuesday), this.mapToReservationsDay(jsonBranch.reservation_times.wednesday), this.mapToReservationsDay(jsonBranch.reservation_times.thursday), this.mapToReservationsDay(jsonBranch.reservation_times.friday));\n        }\n    }\n\n    /**\n     * It is a helper method for mapToReservationsSchedule(). It maps the data for a day to an array of ReservationTimeSlotModel\n     * @param {Array<Object>} jsonDay\n     * @returns {Array<ReservationTimeSlotModel>}\n     */\n    mapToReservationsDay(jsonDay){\n        const isEmpty = jsonDay == null || jsonDay.length === 0;\n        return isEmpty ? [] : jsonDay.map((period) => new ReservationTimeSlotModel(period[0], period[1]));\n    }\n\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}