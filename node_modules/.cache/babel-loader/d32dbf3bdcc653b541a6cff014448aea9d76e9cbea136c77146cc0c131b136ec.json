{"ast":null,"code":"import MainHeader from '@/View/components/header/MainHeader.vue';\nimport PageContainer from '@/View/components/ui/containers/PageContainer.vue';\nimport ReservationsHeader from '@/View/components/PageHeaders/ReservationsHeader.vue';\nimport ReservationListTable from '@/View/components/tables/ReservationListTable.vue';\nimport AddBranchModal from '@/View/components/modalForms/AddBranchModal.vue';\nimport PaginatorContainer from '@/View/components/ui/containers/PaginatorContainer.vue';\nimport { Modal } from 'bootstrap';\nexport default {\n  name: 'BranchReservationsLayout',\n  components: {\n    MainHeader,\n    PageContainer,\n    ReservationsHeader,\n    ReservationListTable,\n    AddBranchModal,\n    PaginatorContainer\n  },\n  props: {\n    getBranches: {\n      type: Function,\n      required: true,\n      async: true\n    },\n    addReservations: {\n      type: Function,\n      required: true,\n      async: true\n    },\n    submitReservationSettings: {\n      type: Function,\n      required: true,\n      async: true\n    }\n  },\n  data() {\n    return {\n      branchesReservationList: [],\n      branchesNonReservationList: [],\n      isLoading: false,\n      currPage: 0,\n      // starts from 0,\n      reservationBranchesPages: 50,\n      nonReservationBranchesPages: 50,\n      addingBranchModalId: 'ADD_BRANCH_MODAL_ID'\n    };\n  },\n  async mounted() {\n    this.isLoading = true;\n    try {\n      const {\n        list,\n        pagesCount\n      } = await this.getBranches(true, this.currPage);\n      this.branchesReservationList = list;\n      this.reservationBranchesPages = pagesCount;\n    } finally {\n      this.isLoading = false;\n    }\n  },\n  methods: {\n    async onBranchClick(branch) {\n      console.log('branch:', branch);\n    },\n    async handleLoadingReservationBranches(targetPage) {\n      this.isLoading = true;\n      try {\n        const {\n          list,\n          pagesCount\n        } = await this.getBranches(true, targetPage);\n        this.branchesReservationList = list;\n        this.reservationBranchesPages = pagesCount;\n        this.currPage = targetPage;\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    async handleLoadingNonReserveBranches(targetPage) {\n      try {\n        const {\n          list,\n          pagesCount\n        } = await this.getBranches(false, targetPage);\n        this.branchesNonReservationList = list;\n        this.nonReservationBranchesPages = pagesCount;\n      } catch (error) {\n        // do nothing\n      }\n    },\n    async handleClickAddBranchBtn() {\n      this.isLoading = true;\n      try {\n        const {\n          list,\n          pagesCount\n        } = await this.getBranches(false, this.currPage);\n        this.branchesNonReservationList = list;\n        this.nonReservationBranchesPages = pagesCount;\n        const addBranchModal = new Modal(document.getElementById(this.addingBranchModalId));\n        addBranchModal.show();\n      } finally {\n        this.isLoading = false;\n      }\n    },\n    handleClickDisableReservationsBtn() {\n      console.log('handleClickDisableReservationsBtn');\n    },\n    submitAddBranchesSelection(branches) {\n      console.log('submitSelection:', branches);\n    }\n  }\n};","map":{"version":3,"names":["MainHeader","PageContainer","ReservationsHeader","ReservationListTable","AddBranchModal","PaginatorContainer","Modal","name","components","props","getBranches","type","Function","required","async","addReservations","submitReservationSettings","data","branchesReservationList","branchesNonReservationList","isLoading","currPage","reservationBranchesPages","nonReservationBranchesPages","addingBranchModalId","mounted","list","pagesCount","methods","onBranchClick","branch","console","log","handleLoadingReservationBranches","targetPage","handleLoadingNonReserveBranches","error","handleClickAddBranchBtn","addBranchModal","document","getElementById","show","handleClickDisableReservationsBtn","submitAddBranchesSelection","branches"],"sources":["src/View/layouts/BranchReservationsLayout.vue"],"sourcesContent":["<template>\n  <div class=\"w-100\" style=\"height: 100vh;\" :dir=\"$store.state.language.currentLanguage === 'ar' ? 'rtl' : 'ltr'\">\n\n    <MainHeader />\n\n    <PageContainer>\n      <ReservationsHeader \n        :handleClickAddBranchBtn=\"handleClickAddBranchBtn\" \n        :handleClickDisableReservationsBtn=\"handleClickDisableReservationsBtn\" \n      />\n\n        <div class=\"table-spacer\"></div>\n\n        <div v-if=\"!isLoading\">\n          <ReservationListTable :branches=\"branchesReservationList\" :onBranchClick=\"onBranchClick\" />\n          <PaginatorContainer \n            :currPageIndex=\"currPage\"\n            :totalPages=\"reservationBranchesPages\"\n            :handleClickPage=\"handleLoadingReservationBranches\"\n          />  \n        </div>\n        <div v-else>\n          <div class=\"text-center\">\n            <div class=\"spinner-border\" role=\"status\">\n              <span class=\"visually-hidden\">Loading...</span>\n          </div>\n        </div>\n      </div>\n    </PageContainer>\n\n    <AddBranchModal \n      :nonReservationsBranches=\"branchesNonReservationList\" \n      :submitSelection=\"submitAddBranchesSelection\" \n      :pagesCount=\"nonReservationBranchesPages\" \n      :handleNavigateToPage=\"handleLoadingNonReserveBranches\"\n      :modalId=\"addingBranchModalId\" \n    />\n\n  </div>\n</template>\n\n<script>\nimport MainHeader from '@/View/components/header/MainHeader.vue';\nimport PageContainer from '@/View/components/ui/containers/PageContainer.vue';\nimport ReservationsHeader from '@/View/components/PageHeaders/ReservationsHeader.vue';\nimport ReservationListTable from '@/View/components/tables/ReservationListTable.vue';\nimport AddBranchModal from '@/View/components/modalForms/AddBranchModal.vue';\nimport PaginatorContainer from '@/View/components/ui/containers/PaginatorContainer.vue';\nimport { Modal } from 'bootstrap';\n\nexport default {\n  name: 'BranchReservationsLayout',\n  components: {\n    MainHeader,\n    PageContainer,\n    ReservationsHeader,\n    ReservationListTable,\n    AddBranchModal,\n    PaginatorContainer\n  },\n  props: {\n    getBranches: {\n      type: Function,\n      required: true,\n      async: true\n    },\n    addReservations: {\n      type: Function,\n      required: true,\n      async: true\n    },\n    submitReservationSettings: {\n      type: Function,\n      required: true,\n      async: true\n    }\n  },\n  data() {\n    return {\n      branchesReservationList: [], \n      branchesNonReservationList: [],\n      isLoading: false,\n      currPage: 0, // starts from 0,\n      reservationBranchesPages: 50,\n      nonReservationBranchesPages: 50,\n      addingBranchModalId: 'ADD_BRANCH_MODAL_ID'\n    }\n  },\n  async mounted() {\n    this.isLoading = true\n    try {\n      const {list, pagesCount} = await this.getBranches(true, this.currPage)\n      this.branchesReservationList = list\n      this.reservationBranchesPages = pagesCount\n    } finally {\n      this.isLoading = false\n    }\n  },\n  methods: { \n    async onBranchClick(branch) {\n      console.log('branch:', branch)\n    },\n    async handleLoadingReservationBranches(targetPage) {\n      this.isLoading = true\n      try {\n        const {list, pagesCount} = await this.getBranches(true, targetPage)\n        this.branchesReservationList = list\n        this.reservationBranchesPages = pagesCount\n        this.currPage = targetPage\n      } finally {\n        this.isLoading = false\n      }\n    },\n    async handleLoadingNonReserveBranches(targetPage) {\n      try {\n        const {list, pagesCount} = await this.getBranches(false, targetPage)\n        this.branchesNonReservationList = list\n        this.nonReservationBranchesPages = pagesCount\n      } catch (error) {\n        // do nothing\n      }\n    },\n    async handleClickAddBranchBtn() {\n      this.isLoading = true\n      try {\n        const {list, pagesCount} = await this.getBranches(false, this.currPage)\n        this.branchesNonReservationList = list\n        this.nonReservationBranchesPages = pagesCount\n        const addBranchModal = new Modal(document.getElementById(this.addingBranchModalId))\n        addBranchModal.show()\n      } finally {\n        this.isLoading = false\n      }\n    },\n    handleClickDisableReservationsBtn() {\n      console.log('handleClickDisableReservationsBtn')\n    },\n    submitAddBranchesSelection(branches) {\n      console.log('submitSelection:', branches)\n    }\n  } \n}\n</script>\n\n<style scoped>\n.table-spacer {\n  height: 3rem;\n}\n</style>"],"mappings":"AA0CA,OAAAA,UAAA;AACA,OAAAC,aAAA;AACA,OAAAC,kBAAA;AACA,OAAAC,oBAAA;AACA,OAAAC,cAAA;AACA,OAAAC,kBAAA;AACA,SAAAC,KAAA;AAEA;EACAC,IAAA;EACAC,UAAA;IACAR,UAAA;IACAC,aAAA;IACAC,kBAAA;IACAC,oBAAA;IACAC,cAAA;IACAC;EACA;EACAI,KAAA;IACAC,WAAA;MACAC,IAAA,EAAAC,QAAA;MACAC,QAAA;MACAC,KAAA;IACA;IACAC,eAAA;MACAJ,IAAA,EAAAC,QAAA;MACAC,QAAA;MACAC,KAAA;IACA;IACAE,yBAAA;MACAL,IAAA,EAAAC,QAAA;MACAC,QAAA;MACAC,KAAA;IACA;EACA;EACAG,KAAA;IACA;MACAC,uBAAA;MACAC,0BAAA;MACAC,SAAA;MACAC,QAAA;MAAA;MACAC,wBAAA;MACAC,2BAAA;MACAC,mBAAA;IACA;EACA;EACA,MAAAC,QAAA;IACA,KAAAL,SAAA;IACA;MACA;QAAAM,IAAA;QAAAC;MAAA,eAAAjB,WAAA,YAAAW,QAAA;MACA,KAAAH,uBAAA,GAAAQ,IAAA;MACA,KAAAJ,wBAAA,GAAAK,UAAA;IACA;MACA,KAAAP,SAAA;IACA;EACA;EACAQ,OAAA;IACA,MAAAC,cAAAC,MAAA;MACAC,OAAA,CAAAC,GAAA,YAAAF,MAAA;IACA;IACA,MAAAG,iCAAAC,UAAA;MACA,KAAAd,SAAA;MACA;QACA;UAAAM,IAAA;UAAAC;QAAA,eAAAjB,WAAA,OAAAwB,UAAA;QACA,KAAAhB,uBAAA,GAAAQ,IAAA;QACA,KAAAJ,wBAAA,GAAAK,UAAA;QACA,KAAAN,QAAA,GAAAa,UAAA;MACA;QACA,KAAAd,SAAA;MACA;IACA;IACA,MAAAe,gCAAAD,UAAA;MACA;QACA;UAAAR,IAAA;UAAAC;QAAA,eAAAjB,WAAA,QAAAwB,UAAA;QACA,KAAAf,0BAAA,GAAAO,IAAA;QACA,KAAAH,2BAAA,GAAAI,UAAA;MACA,SAAAS,KAAA;QACA;MAAA;IAEA;IACA,MAAAC,wBAAA;MACA,KAAAjB,SAAA;MACA;QACA;UAAAM,IAAA;UAAAC;QAAA,eAAAjB,WAAA,aAAAW,QAAA;QACA,KAAAF,0BAAA,GAAAO,IAAA;QACA,KAAAH,2BAAA,GAAAI,UAAA;QACA,MAAAW,cAAA,OAAAhC,KAAA,CAAAiC,QAAA,CAAAC,cAAA,MAAAhB,mBAAA;QACAc,cAAA,CAAAG,IAAA;MACA;QACA,KAAArB,SAAA;MACA;IACA;IACAsB,kCAAA;MACAX,OAAA,CAAAC,GAAA;IACA;IACAW,2BAAAC,QAAA;MACAb,OAAA,CAAAC,GAAA,qBAAAY,QAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}